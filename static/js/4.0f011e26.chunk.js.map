{"version":3,"sources":["components/Container/Container.js","components/Section/Section.module.css","components/Container/Container.module.css","components/Section/Section.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ModalEditContact/ModalEditContact.module.css","components/ContactItem/ContactItem.module.css","components/ContactList/ContactList.module.css","pages/ContactsPage.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ModalEditContact/ModalEditContact.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","pages/ContactsPage.js"],"names":["Container","children","className","s","container","module","exports","Section","nameForClass","ContactForm","items","useSelector","contactsSelectors","getItems","dispatch","useDispatch","useState","name","setName","number","setNumber","handleGetValue","e","currentTarget","value","Error","onSubmit","newName","preventDefault","find","store","addNotification","title","message","type","insert","animationIn","animationOut","dismiss","duration","onScreen","contactsOperations","addContact","label","input","onChange","placeholder","pattern","required","button","Filter","filter","getFilter","changeFilter","trim","icon","ModalEditContact","id","show","setShow","setNewName","newNumber","setNewNumber","handleClose","handleEdit","contact","editContact","Button","buttonEdit","onClick","Modal","onHide","backdrop","keyboard","centered","size","form","inputName","inputNumber","Footer","modalFooter","buttonCancel","buttonDoneEdit","ContactItem","link","href","wrapper","buttonAccent","deleteContact","ContactList","getVisibleItems","list","map","item","ContactsPage","useEffect","getContacts","visibleItems","newContactWrapper","newContactTitle","titleContacts","text"],"mappings":"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","file":"static/js/4.0f011e26.chunk.js","sourcesContent":["import s from './Container.module.css';\n\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nexport default Container;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new-contact\":\"Section_new-contact__27My6\",\"section\":\"Section_section__3hhO8\",\"sectionList\":\"Section_sectionList__1yoki Section_section__3hhO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3abpX\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\nimport Container from 'components/Container';\n\nconst Section = ({ nameForClass, children }) => (\n  <section className={s[`${nameForClass}`]}>\n    <Container>{children}</Container>\n  </section>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  nameForClass: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__ZI80O\",\"input\":\"ContactForm_input__3fLNx\",\"button\":\"ContactForm_button__3FGAB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"Filter_icon__2U9Hl\",\"label\":\"Filter_label__2cKOq\",\"input\":\"Filter_input__3K7OF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonEdit\":\"ModalEditContact_buttonEdit__14lOn\",\"buttonDoneEdit\":\"ModalEditContact_buttonDoneEdit__3ieXf\",\"buttonCancel\":\"ModalEditContact_buttonCancel__2Jb42\",\"form\":\"ModalEditContact_form__2R8pV\",\"label\":\"ModalEditContact_label__2WFnC\",\"inputName\":\"ModalEditContact_inputName__tX4Jz\",\"inputNumber\":\"ModalEditContact_inputNumber__2odY1\",\"modalFooter\":\"ModalEditContact_modalFooter__3OoCW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"ContactItem_link__3Ssq3\",\"name\":\"ContactItem_name__QqUB9\",\"wrapper\":\"ContactItem_wrapper__39ca-\",\"icon\":\"ContactItem_icon__1k4gV\",\"number\":\"ContactItem_number__3J7Dn\",\"buttonAccent\":\"ContactItem_buttonAccent__2NULb\",\"button\":\"ContactItem_button__3nzrn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3lOUi\",\"item\":\"ContactList_item__3EqWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newContactWrapper\":\"ContactsPage_newContactWrapper__1ZeqM\",\"newContactTitle\":\"ContactsPage_newContactTitle__3kait\",\"titleContacts\":\"ContactsPage_titleContacts__6YkUG\",\"text\":\"ContactsPage_text__2LOtR\",\"title\":\"ContactsPage_title__2T9_f\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { store } from 'react-notifications-component';\nimport { contactsOperations } from 'redux/contacts';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const items = useSelector(contactsSelectors.getItems);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleGetValue = e => {\n    const field = e.currentTarget.name;\n\n    switch (field) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(e.currentTarget.value);\n        break;\n      default:\n        throw new Error();\n    }\n  };\n\n  const showNotification = () => {\n    store.addNotification({\n      title: 'Oops!',\n      message:\n        'But there’s already a contact with that name on your contact list',\n      type: 'danger',\n      insert: 'top',\n      container: 'top-right',\n      animationIn: ['animate__animated', 'animate__fadeIn'],\n      animationOut: ['animate__animated', 'animate__fadeOut'],\n      dismiss: {\n        duration: 3000,\n        onScreen: true,\n      },\n    });\n  };\n\n  const repeatCheck = newName => {\n    return items.find(({ name }) => name === newName);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (repeatCheck(name)) {\n      showNotification();\n      return;\n    }\n\n    dispatch(contactsOperations.addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={name}\n          onChange={handleGetValue}\n          placeholder=\"Elon Reeve Musk\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          value={number}\n          onChange={handleGetValue}\n          placeholder=\"1-800-613-8840\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={s.button} type=\"submit\" aria-label=\"button-submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { changeFilter } from 'redux/contacts';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { GoSearch } from 'react-icons/go';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n\n  const handleFilterValue = e =>\n    dispatch(changeFilter(e.currentTarget.value.trim()));\n\n  return (\n    <label className={s.label}>\n      <input\n        className={s.input}\n        placeholder=\"Enter to search...\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterValue}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <GoSearch className={s.icon} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useState } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { contactsOperations } from 'redux/contacts';\r\n\r\nimport s from './ModalEditContact.module.css';\r\n\r\nconst ModalEditContact = ({ id, name, number }) => {\r\n  const [show, setShow] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [newName, setNewName] = useState(name);\r\n  const [newNumber, setNewNumber] = useState(number);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const handleEdit = e => {\r\n    e.preventDefault();\r\n    const contact = { name: newName, number: newNumber, id };\r\n    dispatch(contactsOperations.editContact(contact));\r\n    handleClose();\r\n  };\r\n\r\n  const handleGetValue = e => {\r\n    const field = e.currentTarget.name;\r\n\r\n    switch (field) {\r\n      case 'name':\r\n        setNewName(e.currentTarget.value);\r\n        break;\r\n      case 'number':\r\n        setNewNumber(e.currentTarget.value);\r\n        break;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button className={s.buttonEdit} onClick={handleShow}>\r\n        Edit\r\n      </Button>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        centered\r\n        size=\"lg\"\r\n      >\r\n        <form className={s.form} onSubmit={handleEdit}>\r\n          <label className={s.label}>\r\n            Name\r\n            <input\r\n              className={s.inputName}\r\n              value={newName}\r\n              onChange={handleGetValue}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label className={s.label}>\r\n            Number\r\n            <input\r\n              className={s.inputNumber}\r\n              value={newNumber}\r\n              onChange={handleGetValue}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <Modal.Footer className={s.modalFooter}>\r\n            <Button\r\n              onClick={handleClose}\r\n              aria-label=\"button-cancel\"\r\n              className={s.buttonCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleEdit}\r\n              type=\"submit\"\r\n              aria-label=\"button-edit\"\r\n              className={s.buttonDoneEdit}\r\n              s\r\n            >\r\n              Edit\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalEditContact;\r\n","import PropTypes from 'prop-types';\nimport ModalEditContact from 'components/ModalEditContact';\nimport { useDispatch } from 'react-redux';\nimport { FiPhoneCall } from 'react-icons/fi';\nimport { contactsOperations } from 'redux/contacts';\nimport s from './ContactItem.module.css';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <a className={s.link} href=\"tel:{number}\">\n        <p className={s.name}>{name}</p>\n        <div className={s.wrapper}>\n          <FiPhoneCall className={s.icon} />\n          <p className={s.number}>{number}</p>\n        </div>\n      </a>\n      <button\n        className={s.buttonAccent}\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n        aria-label=\"delete contact\"\n      >\n        Delete\n      </button>\n      <ModalEditContact id={id} name={name} number={number} />\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport ContactItem from 'components/ContactItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const items = useSelector(contactsSelectors.getVisibleItems);\n\n  return (\n    <ul className={s.list}>\n      {items.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <ContactItem id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import ReactNotification from 'react-notifications-component';\r\nimport { useEffect } from 'react';\r\nimport 'react-notifications-component/dist/theme.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\r\nimport Section from 'components/Section';\r\nimport ContactForm from 'components/ContactForm';\r\nimport Filter from 'components/Filter';\r\nimport ContactList from 'components/ContactList';\r\n\r\nimport s from './ContactsPage.module.css';\r\n\r\nconst ContactsPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactsOperations.getContacts()), [dispatch]);\r\n\r\n  const visibleItems = useSelector(contactsSelectors.getVisibleItems);\r\n\r\n  return (\r\n    <>\r\n      <ReactNotification />\r\n      <Section nameForClass={'section'}>\r\n        <h1 className={s.title}>My phonebook</h1>\r\n        <div className={s.newContactWrapper}>\r\n          <h2 className={s.newContactTitle}>A new contact</h2>\r\n          <ContactForm />\r\n        </div>\r\n      </Section>\r\n      <Section nameForClass={'sectionList'}>\r\n        <h2 className={s.titleContacts}>Contacts</h2>\r\n        <Filter />\r\n        {visibleItems[0] ? (\r\n          <ContactList />\r\n        ) : (\r\n          <p className={s.text}>There’s nothing here yet...</p>\r\n        )}\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}